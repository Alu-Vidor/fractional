"""
felab/basis.py

–°–±–æ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–Ω–æ-—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–∑–∏—Å–∞ ùîÖ_N(Œµ) = { œÜ‚ÇÄ, œà‚ÇÅ, ‚Ä¶, œà_N }.

–ò–¥–µ—è:
- œÜ‚ÇÄ(x; Œµ) = E_Œ±( -a(0) x^Œ± / Œµ^Œ± ) ‚Äî –∞—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—è.
- {œà_k} ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ì—Ä–∞–º–∞‚Äì–®–º–∏–¥—Ç–∞ –≤ Œµ-—ç–Ω–µ—Ä–≥–∏–∏
  –Ω–∞–¥ —Å—ã—Ä—å—ë–º p_k(x)=x*T_k(2x/T-1) (–∏–ª–∏ x*P_k(2x/T-1)), –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  –∫ œÜ‚ÇÄ –∏ –≤–∑–∞–∏–º–Ω–æ –≤ ‚ü®¬∑,¬∑‚ü©_{Œµ,Œ±,a}.

–ü—É–±–ª–∏—á–Ω–æ–µ API:
- build_basis(N, alpha, eps, a_fun, T, raw_family="chebyshev", **opts) -> Basis
- –∫–ª–∞—Å—Å Basis:
    .phi0(x)                 ‚Äî –∞—Ç–æ–º
    .psi[k](x)               ‚Äî k-–π –±–∞–∑–∏—Å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä, 1‚â§k‚â§N (—Å–ø–∏—Å–æ–∫ callables)
    .size                    ‚Äî N
    .quad                    ‚Äî –∫–≤–∞–¥—Ä–∞—Ç—É—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏–ª—Å—è –±–∞–∑–∏—Å
    .inner(u,v)              ‚Äî Œµ-—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ ‚ü®u,v‚ü© (—á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è)
    .dhalf_phi0()            ‚Äî —á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä D_C^{Œ±/2} œÜ‚ÇÄ(x) –Ω–∞ —É–∑–ª–∞—Ö quad
    .grid(n, kind)           ‚Äî —É–¥–æ–±–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–∞ [0,T]
    .T, .alpha, .eps, .a0    ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏

–û–ø—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã build_basis):
- quad_scheme: "gauss-legendre" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- quad_n:      int, —á–∏—Å–ª–æ —É–∑–ª–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é max(200, 4N+40))
- gs_reorth:   bool, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
- gs_orth_tol: float, –ø–æ—Ä–æ–≥ –æ—Ç—Å–µ—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1e-12)
- gs_stable:   bool, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–æ–π—á–∏–≤—É—é –ø—Ä–æ–µ–∫—Ü–∏—é –ø–æ –ì—Ä–∞–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
- gs_reg:      float, —Ç–∏—Ö–æ–Ω–æ–≤—Å–∫–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: numpy, felab.poly, felab.atom, felab.gram_schmidt, felab.energy, felab.quadrature
"""

from __future__ import annotations

from dataclasses import dataclass
from functools import partial
from typing import Callable, List, Literal, Optional, Tuple

import numpy as np

from .poly import build_raw_family
from .atom import phi0_factory
from .gram_schmidt import orthonormalize_energy
from .energy import inner_energy
from .quadrature import build_quadrature_on_0T, Quadrature


Array = np.ndarray
Func = Callable[[Array | float], Array]


# -------------------------------- –ë–ê–ó–ò–° ------------------------------------ #
@dataclass(frozen=True)
class Basis:
    """
    –•—Ä–∞–Ω–∏–ª–∏—â–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–∑–∏—Å–∞ –∏ —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
    """
    T: float
    alpha: float
    eps: float
    a0: float
    a_fun: Callable[[Array], Array]
    quad: Quadrature
    phi0: Func
    psi: List[Func]  # –¥–ª–∏–Ω—ã N
    _inner: Callable[[Func, Func], float]

    @property
    def size(self) -> int:
        return len(self.psi)

    def inner(self, u: Func, v: Func) -> float:
        return self._inner(u, v)

    def dhalf_phi0(self) -> Callable[[Array | float], Array]:
        """
        –ß–∏—Å–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä D_C^{Œ±/2} œÜ‚ÇÄ(x) –Ω–∞ —É–∑–ª–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã (—Å–º. atom.Phi0.dhalf).
        """
        from .atom import Phi0  # —Ç–∏–ø –¥–ª—è mypy
        if not hasattr(self.phi0, "__self__") or not isinstance(self.phi0.__self__, object):
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥–∞–ª–∏ ¬´–≥–æ–ª—É—é¬ª —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ—É–ø–∞–∫—É–µ–º –≤ —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è dhalf.
            # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ: –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º –æ–±—ä–µ–∫—Ç Phi0 –∏ –≤—ã–∑–æ–≤–µ–º dhalf.
            p = phi0_factory(self.a0, self.eps, self.alpha)
            return p.dhalf(self.quad)
        # –í –æ–±—ã—á–Ω–æ–π —Å–±–æ—Ä–∫–µ phi0 ‚Äî bound-method Phi0.__call__, —Ç–∞–∫ —á—Ç–æ –∏–∑–≤–ª–µ—á—ë–º –æ–±—ä–µ–∫—Ç:
        obj = self.phi0.__self__  # type: ignore[attr-defined]
        try:
            return obj.dhalf(self.quad)  # type: ignore[no-any-return]
        except Exception:
            # Fallback
            p = phi0_factory(self.a0, self.eps, self.alpha)
            return p.dhalf(self.quad)

    def grid(self, n: int, kind: Literal["uniform", "chebyshev"] = "uniform") -> Array:
        """
        –£–¥–æ–±–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–∞ [0, T] –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        if n <= 1:
            return np.array([0.0, self.T])
        if kind == "uniform":
            return np.linspace(0.0, self.T, int(n), dtype=float)
        elif kind == "chebyshev":
            k = np.arange(n, dtype=float)
            x_ref = np.cos((2.0 * k + 1.0) * np.pi / (2.0 * n))
            x_ref.sort()
            return 0.5 * (x_ref + 1.0) * self.T
        else:
            raise ValueError("Unknown kind for grid()")


# ---------------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ------------------------------ #
def _as_callable_vec(f: Callable[[float], float] | Callable[[Array], Array]) -> Callable[[Array], Array]:
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π a(x), f(x).
    """
    def g(x: Array) -> Array:
        xv = np.asarray(x, dtype=float)
        out = f(xv)  # type: ignore
        if np.isscalar(out):
            return np.full_like(xv, float(out))
        return np.asarray(out, dtype=float)
    return g


# -------------------------------- –°–ë–û–†–ö–ê ----------------------------------- #
def build_basis(
    N: int,
    alpha: float,
    eps: float,
    a_fun: Callable[[float], float] | Callable[[Array], Array],
    T: float,
    raw_family: Literal["chebyshev", "jacobi"] = "chebyshev",
    *,
    quad_scheme: Literal["gauss-legendre"] = "gauss-legendre",
    quad_n: Optional[int] = None,
    gs_reorth: bool = True,
    gs_orth_tol: float = 1e-12,
    gs_stable: bool = True,
    gs_reg: float = 0.0,
) -> Basis:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–∏—Å ùîÖ_N(Œµ) = {œÜ‚ÇÄ, œà‚ÇÅ..œà_N}.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ---------
    N          : —á–∏—Å–ª–æ —Ñ—É–Ω–∫—Ü–∏–π œà_k (–±–µ–∑ —É—á—ë—Ç–∞ œÜ‚ÇÄ).
    alpha      : –ø–æ—Ä—è–¥–æ–∫ 0<Œ±<1.
    eps        : –º–∞–ª—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä Œµ>0.
    a_fun      : —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ a(x) (–æ–∂–∏–¥–∞–µ—Ç—Å—è a(x) ‚â• a0 > 0).
    T          : –¥–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [0, T].
    raw_family : "chebyshev" | "jacobi" ‚Äî –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ p_k.

    –û–ø—Ü–∏–∏
    -----
    quad_scheme: —Å—Ö–µ–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã –Ω–∞ [0,T] –¥–ª—è ‚ü®¬∑,¬∑‚ü© (—Å–µ–π—á–∞—Å "gauss-legendre").
    quad_n     : —á–∏—Å–ª–æ —É–∑–ª–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é max(200, 4N+40)).
    gs_*       : –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ì—Ä–∞–º–∞‚Äì–®–º–∏–¥—Ç–∞ (—Å–º. –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è gram_schmidt.py).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    Basis
    """
    if not (N > 0):
        raise ValueError("N –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
    if not (0.0 < alpha < 1.0):
        raise ValueError("alpha –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ (0,1)")
    if not (eps > 0.0):
        raise ValueError("eps –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
    if not (T > 0.0):
        raise ValueError("T –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")

    a_vec = _as_callable_vec(a_fun)
    a0 = float(a_vec(np.array([0.0]))[0])
    if not (a0 > 0.0):
        raise ValueError("a(0) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã.")

    # --- –ö–≤–∞–¥—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã ---
    if quad_n is None:
        quad_n = max(200, 4 * N + 40)
    quad = build_quadrature_on_0T(quad_scheme, T, int(quad_n))

    # --- –ê—Ç–æ–º œÜ‚ÇÄ ---
    p0 = phi0_factory(a0=a0, eps=eps, alpha=alpha)
    phi0_fun = p0.__call__  # bound method (Basis.dhalf_phi0 –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ)

    # --- –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è Œµ-—ç–Ω–µ—Ä–≥–∏—è ---
    inner = partial(inner_energy, alpha=alpha, eps=eps, a_fun=a_vec, quad=quad)

    # --- –°—ã—Ä—å—ë p_k ---
    raws = build_raw_family(N, T, raw_family)
    raw_funcs: List[Func] = [r.eval for r in raws]  # callables x‚Ü¶p_k(x)

    # --- –û—Ä—Ç–æ–Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –≤ —ç–Ω–µ—Ä–≥–∏–∏ (–æ–ø–µ—Ä–∞—Ç–æ—Ä–Ω–æ-–∏–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MGS) ---
    psi_funcs = orthonormalize_energy(
        phi0=phi0_fun,
        raw_funcs=raw_funcs,
        inner=inner,
        reorth=gs_reorth,
        orth_tol=gs_orth_tol,
        stable_projection=gs_stable,
        regularization=gs_reg,
        enforce_zero_at=0.0,
        enforce_zero=True,
        max_zero_iters=3,
    )

    # –ï—Å–ª–∏ –∏–∑-–∑–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–π –ª–∏–Ω–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ N —Ñ—É–Ω–∫—Ü–∏–π ‚Äî —ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ,
    # –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–¥–µ—Å—å ‚Äî –º—è–≥–∫–æ: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ print).
    if len(psi_funcs) < N:
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Å—ã—Ä—å—ë –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å quad_n.
        print(f"[felab.basis] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(psi_funcs)} —Ñ—É–Ω–∫—Ü–∏–π œà (–∑–∞–ø—Ä–æ—à–µ–Ω–æ N={N}).")

    return Basis(
        T=T,
        alpha=alpha,
        eps=eps,
        a0=a0,
        a_fun=a_vec,
        quad=quad,
        phi0=phi0_fun,
        psi=psi_funcs,
        _inner=inner,
    )


# ------------------------------- –°–ê–ú–û–û–¢–õ–ê–î–ö–ê ------------------------------- #
if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ a(x)=1, œÜ‚ÇÄ –∏–∑–≤–µ—Å—Ç–µ–Ω,
    # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–∑–∏—Å —Å—Ç—Ä–æ–∏—Ç—Å—è –∏ –æ—Ä—Ç–æ–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (–ø—Ä–∏–º–µ—Ä–Ω–æ).
    T = 1.0
    alpha = 0.6
    eps = 1e-3
    a = lambda x: 1.0

    B = build_basis(N=16, alpha=alpha, eps=eps, a_fun=a, T=T, raw_family="chebyshev", quad_n=256)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚ü®œà_i, œà_j‚ü© ‚âà Œ¥_ij, ‚ü®œà_i, œÜ‚ÇÄ‚ü© ‚âà 0
    tol_orth = 5e-10
    for i, qi in enumerate(B.psi):
        nrm = B.inner(qi, qi)
        assert abs(nrm - 1.0) < 5e-8, f"–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ œà_{i+1} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {nrm}"
        # –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–∂–¥—É œà
        for j in range(i):
            val = B.inner(qi, B.psi[j])
            assert abs(val) < tol_orth, f"œà_{i+1} –Ω–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞ œà_{j+1}: {val}"
        # –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫ œÜ0
        val0 = B.inner(qi, B.phi0)
        assert abs(val0) < tol_orth, f"œà_{i+1} –Ω–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞ œÜ0: {val0}"

    # –ó–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–ª–µ
    for i, qi in enumerate(B.psi):
        z = qi(0.0)
        z = float(z if not isinstance(z, np.ndarray) else z.item())
        assert abs(z) < 1e-12, f"œà_{i+1}(0) ‚â† 0"

    print("basis.py basic self-tests passed.")