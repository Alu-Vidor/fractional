"""
felab/assemble.py

–°–±–æ—Ä–∫–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è FELAB –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–º –±–∞–∑–∏—Å–µ ùîÖ_N(Œµ) = {œÜ‚ÇÄ, œà‚ÇÅ,‚Ä¶,œà_N}.

–£—Ä–∞–≤–Ω–µ–Ω–∏–µ:
    A(u, v) = (f, v)_{L^2(0,T)}   –¥–ª—è –≤—Å–µ—Ö v ‚àà span{œà_k},
–≥–¥–µ
    A(u, v) = Œµ^Œ± ( D_C^{Œ±/2} u, D_C^{Œ±/2} v ) + (a u, v).

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:
    u_N(x) = u0 * œÜ‚ÇÄ(x; Œµ) + Œ£_{k=1}^N c_k œà_k(x).

–õ–∏–Ω–µ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã c = (c_1,‚Ä¶,c_N)^T:
    K c = b,
–≥–¥–µ
    K_{ij} = A(œà_j, œà_i),
    b_i    = (f, œà_i) - u0 * A(œÜ‚ÇÄ, œà_i).

–ü—É–±–ª–∏—á–Ω–æ–µ API:
- assemble_system(basis, f_fun, u0=0.0) -> (K, b, extras)
- l2_inner(basis, u, v) ‚Üí (u, v)_{L^2}
- evaluate_solution(basis, coeffs, u0, x) ‚Üí –∑–Ω–∞—á–µ–Ω–∏—è u_N(x)
- build_solution_callable(basis, coeffs, u0) ‚Üí callable x‚Ü¶u_N(x)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: numpy, felab.basis.Basis (basis.inner —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è Œµ-—ç–Ω–µ—Ä–≥–∏—è),
             felab.quadrature.Quadrature –¥–ª—è L2-–∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤.
"""

from __future__ import annotations

from dataclasses import dataclass
from typing import Callable, Dict, Tuple, Optional

import numpy as np

from .basis import Basis
from .quadrature import Quadrature


Array = np.ndarray
Func = Callable[[Array | float], Array]


# ------------------------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û ----------------------------- #
def _as_callable_vec(f: Callable[[float], float] | Callable[[Array], Array]) -> Callable[[Array], Array]:
    def g(x: Array) -> Array:
        xv = np.asarray(x, dtype=float)
        out = f(xv)  # type: ignore
        if np.isscalar(out):
            return np.full_like(xv, float(out))
        return np.asarray(out, dtype=float)
    return g


def l2_inner(
    basis: Basis,
    u: Func | Callable[[float], float],
    v: Optional[Func | Callable[[float], float]] = None,
) -> float:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å L2-—Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ [0,T] —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã basis.quad:
        (u, v) = ‚à´_0^T u(x) v(x) dx.
    –ï—Å–ª–∏ v=None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ‚à´_0^T u(x) dx.
    """
    quad: Quadrature = basis.quad
    x, w = quad.nodes, quad.weights
    uu = _as_callable_vec(u)(x)
    if v is None:
        return float(np.dot(w, uu))
    vv = _as_callable_vec(v)(x)
    return float(np.dot(w, uu * vv))


# ------------------------------ –°–ë–û–†–ö–ê K, b -------------------------------- #
@dataclass(frozen=True)
class AssemblyExtras:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
      - F: –≤–µ–∫—Ç–æ—Ä F_i = (f, œà_i)_{L2}
      - G: –≤–µ–∫—Ç–æ—Ä G_i = A(œÜ‚ÇÄ, œà_i)
      - SPD_hint: —ç–≤—Ä–∏—Å—Ç–∏–∫–∞, —á—Ç–æ K —Å–∏–º–º. –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    """
    F: Array
    G: Array
    SPD_hint: bool = True


def assemble_system(
    basis: Basis,
    f_fun: Callable[[float], float] | Callable[[Array], Array],
    u0: float = 0.0,
) -> Tuple[Array, Array, AssemblyExtras]:
    """
    –°–±–æ—Ä–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ K –∏ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ b –¥–ª—è —Å–∏—Å—Ç–µ–º—ã K c = b.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ---------
    basis : Basis
        –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–∑–∏—Å {œÜ‚ÇÄ, œà_k} –∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ A(¬∑,¬∑).
    f_fun : callable
        –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å f(x).
    u0 : float
        –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ u(0) = u0 (–≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å —á–µ—Ä–µ–∑ A(œÜ‚ÇÄ, ¬∑)).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    (K, b, extras) :
        K : ndarray (N√óN)
        b : ndarray (N,)
        extras : AssemblyExtras —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏ F –∏ G.
    """
    psi = basis.psi
    N = len(psi)
    if N == 0:
        raise ValueError("–í –±–∞–∑–∏—Å–µ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π œà (N=0). –£–≤–µ–ª–∏—á—å—Ç–µ N –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ basis.")

    # --- –ú–∞—Ç—Ä–∏—Ü–∞ –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ K_{ij} = A(œà_j, œà_i) ---
    K = np.empty((N, N), dtype=float)
    for i in range(N):
        qi = psi[i]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—é, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        for j in range(i, N):
            qj = psi[j]
            val = basis.inner(qj, qi)  # A(qj, qi)
            K[i, j] = val
            K[j, i] = val

    # --- –í–µ–∫—Ç–æ—Ä F_i = (f, œà_i)_{L2} ---
    F = np.empty(N, dtype=float)
    for i in range(N):
        F[i] = l2_inner(basis, f_fun, psi[i])

    # --- –í–µ–∫—Ç–æ—Ä G_i = A(œÜ‚ÇÄ, œà_i) ---
    G = np.empty(N, dtype=float)
    for i in range(N):
        G[i] = basis.inner(basis.phi0, psi[i])

    # --- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å b = F - u0 * G ---
    b = F - float(u0) * G

    extras = AssemblyExtras(F=F, G=G, SPD_hint=True)
    return K, b, extras


# -------------------------- –û–¶–ï–ù–ö–ê/–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï -------------------------- #
def build_solution_callable(
    basis: Basis,
    coeffs: Array,
    u0: float = 0.0,
) -> Func:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é x ‚Ü¶ u_N(x) = u0 œÜ‚ÇÄ(x) + Œ£ c_k œà_k(x).
    """
    psi = basis.psi
    c = np.asarray(coeffs, dtype=float).reshape(-1)
    if c.size != len(psi):
        raise ValueError(f"–†–∞–∑–º–µ—Ä coeffs ({c.size}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —á–∏—Å–ª–æ–º –±–∞–∑–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ({len(psi)}).")

    def uN(x: Array | float) -> Array:
        xv = np.asarray(x, dtype=float)
        acc = basis.phi0(xv) * float(u0)
        for ck, qk in zip(c, psi):
            if ck != 0.0:
                acc = acc + ck * np.asarray(qk(xv), dtype=float)
        if np.isscalar(x):
            return float(acc)  # type: ignore
        return acc

    return uN


def evaluate_solution(
    basis: Basis,
    coeffs: Array,
    u0: float,
    x: Array | float,
) -> Array:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å u_N(x) –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö x.
    """
    uN = build_solution_callable(basis, coeffs, u0)
    return uN(x)


# ------------------------------- –°–ê–ú–û–û–¢–õ–ê–î–ö–ê ------------------------------- #
if __name__ == "__main__":
    # –ú–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏–∫–µ: a(x)=1, f –ø–æ–¥–æ–±—Ä–∞–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã
    # —Ü–µ–ª–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–ª–æ –≤–∏–¥ u = u0*œÜ0 + –≥–ª–∞–¥–∫–∞—è —á–∞—Å—Ç—å (–ø–æ–ª–∏–Ω–æ–º).
    from .basis import build_basis

    T = 1.0
    alpha = 0.6
    eps = 1e-3
    a_fun = lambda x: 1.0
    u0 = 1.2

    # –°—Ç—Ä–æ–∏–º –±–∞–∑–∏—Å
    B = build_basis(N=12, alpha=alpha, eps=eps, a_fun=a_fun, T=T, raw_family="chebyshev", quad_n=256)

    # –í–æ–∑—å–º—ë–º ¬´–∏—Å—Ç–∏–Ω–Ω–æ–µ¬ª —Ä–µ—à–µ–Ω–∏–µ: u_true = u0*œÜ0 + p(x), p(x)=x + 0.3 x^2
    def u_true(x):
        xv = np.asarray(x, dtype=float)
        return u0 * B.phi0(xv) + xv + 0.3 * xv**2

    # –í—ã—á–∏—Å–ª–∏–º f = L u_true = Œµ^Œ± D_C^Œ± u_true + a(x) u_true.
    # –î–ª—è œÜ0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ D_C^Œ± œÜ0 = lam œÜ0, –∞ –¥–ª—è –ø–æ–ª–∏–Ω–æ–º–∞ ‚Äî —Ñ–æ—Ä–º—É–ª–∞ –ö–∞–ø—É—Ç–æ.
    import mpmath as mp
    lam = -B.a0 / (eps ** alpha)
    def Dcap_alpha_poly(x):
        # D_C^Œ± (x) = Œì(2)/Œì(2-Œ±) x^{1-Œ±}
        # D_C^Œ± (x^2) = Œì(3)/Œì(3-Œ±) x^{2-Œ±}
        xv = np.asarray(x, dtype=float)
        return (mp.gamma(2)/mp.gamma(2-alpha)) * xv**(1-alpha) + \
               0.3 * (mp.gamma(3)/mp.gamma(3-alpha)) * xv**(2-alpha)

    def f_fun(x):
        xv = np.asarray(x, dtype=float)
        return (eps**alpha) * (lam * B.phi0(xv) + Dcap_alpha_poly(xv)) + u_true(xv)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏ —Ä–µ—à–∞–µ–º
    K, b, extras = assemble_system(B, f_fun, u0=u0)
    c = np.linalg.solve(K, b)

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ç–∫–µ
    X = B.grid(400)
    err = np.max(np.abs(evaluate_solution(B, c, u0, X) - u_true(X)))
    # –î–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ N –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π
    assert err < 2e-2, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏/—Ä–µ—à–µ–Ω–∏—è: {err:.3e}"

    print("assemble.py basic self-tests passed.")